;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Global Section
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[global]
;; Mandatory management interface connection details
management interface address =
management interface port =
management interface password =
;; Connect retry time in seconds, default 5
;management interface retry = 5
;; Connect timeout in seconds, default 20
;management interface connect timeout = 20

;; Port where the notify server should be listening (local address is always localhost)
;; This is used for example by webauthn CGI to notify the daemon that a pending auth session is ready to be validated
;; Connections will be refused if the management interface is not successfully connected and authenticated
;; Can also be used by a monitorization platform to query for internal errors with a "status" command
;; Example to monitor the state with nagios TCP plugin: /usr/lib64/nagios/plugins/check_tcp -H 127.0.0.1 -p 5194 -E -s 'status\n' -e 'ALL_OK' -r crit -M crit
;; Defaults to 5194
;notify port = 5194

;; A backend realm is usually specified during use authentication by having the username in the form user@realm
;; Optionally you can specify a default backend which will be assumed if no realm is passed on the username
;; See below for the backend sections
;; Example: default backend = myaddomain
;default backend =

;; Define if MFA (Multi-Factor-Authentication) is mandatory, defaults to yes
;; If set to a boolean false value, MFA will only be asked and mandated for users that have a challenge
;; secret set on their backend entry, the others will be able to login as long as they authenticate
;; successfully on the realm backend (see below for backends)
;enforce mfa = yes

;; Challenge expiry in seconds, minimum 20, max 120, default 60
;challenge session timeout = 60

;; Secret encryption type, currently only supports (and defaults to) RSA
;secret encryption type = RSA
;; Mandatory ssl key path for secret encryption type RSA
;; You can use tools/generic/create-master-key.pl to generate one
;; Suggested path is somewhere under /etc/etvpn, e.g. /etc/etvpn/etux-vpnserver-rsa.key
;; It must have secure permissions or the daemon will reject it:
;; - group permissions can (at most) be readable
;; - world permissions must all be unset
;; For example if you are running using a dedicated user (recommended) named "etvpn", typically you want to set it like this:
;;     chmod 640 /etc/etvpn/etux-vpnserver-rsa.key
;;     chown root:etvpn /etc/etvpn/etux-vpnserver-rsa.key
ssl key =

;; Optional routes to push to every client, regardless of the backend
;; Both IPv4 and IPv6 addresses are accepted, in CIDR format
;push routes = << EOF
;network1/prefix1
;network2/prefix2
;EOF
;; Can also be in a single line, separated by spaces
;push routes = network1/prefix1 network2/prefix2

;; Optional push routes can also be specified by groups, as long as the respective backend is configured
;; to determine user/group membership
;push routes group ITAdmins = network1/prefix1 network2/prefix2

;; Optional IP pool group assignments, regardless of the backend
;; To use group based IP pools controlled by this daemon you must:
;; - have a [ippool] section (see below)
;; - configure your openvpn server instance *without* a --server directive
;; - configure your openvpn server instance with:
;;   --topology subnet --mode server --tls-server --topology subnet --ifconfig major_network_address major_network_mask
;;   where major_network_address/major_network_mask must be a network that contains every "pool" you define
;; - optional: --ifconfig-pool subnetwork submask for emulating a "default" IP pool for users not matching any group,
;;   this subnetwork must also be contained in the major network mentioned above (but this pool will be managed by
;;   your OpenVPN server instance itself)
;; - finally, set some "ipv4 pool group" options like on the example below, either here or in each backend section
;; This will only be used if no static IP address is defined for a user by the backend, as long as the user matches
;; one of the groups
;; This allows you to create firewall rules per group as long as you assign them different networks, something that
;; isn't easy to accomplish with a simple and non-managed OpenVPN instance without assigning each user's static IP
;; address individually and manually ensuring it matches the intended group's network (which depending on how many
;; groups and users you have, can become hard to mantain; this way you should be able to accomplish that by simply
;; managing your users' group memberships wisely)
;; Please pay attention to the following:
;; - each time you change a group's IP pool, you'll want to restart/reload the auth daemon(s) but also the openvpn
;;   instance(s) too since connected users' addresses and IP pool reservations' database data will be out of sync;
;;   this will force users to reconnect, but it's the only way to ensure resynchronization - consider yourself warned
;; - if a user belongs to more than one group with IP pools assigned then *THERE ARE NO GUARANTEES ABOUT WHICH GROUP
;;   IS CHOSEN* so for obvious reasons it's not recommended to have a user assigned to different groups having
;;   different IP pools, specially if you're filtering accesses on you firewall based on the user's IP
;;   address/network, since that's asking to shoot yourself in the foot
;; - each pool network must be able to hold at least 6 addresses
;; Currently only IPv4 pools are supported
;; Some examples below, see perldoc Net::IP for more
;ipv4 pool group MyGroup1 = 10.99.99.0/24
;ipv4 pool group MyGroup2SharedPool = 10.99.100.0/24
;ipv4 pool group MyGroup3SharedPool = 10.99.100.0/24
;ipv4 pool group MyGroup4Range = 10.99.101.50-10.99.101.200

;; Include one or more config files - this is only possible in each file's [global] section, but each
;; included file can have other sections to be merged to this file configuration, and the [global] section
;; is not mandatory in those files
;; Recursive configuration file inclusion is also possible
;; To include more than one file you should repeat the include option or use the <<END syntax as follows,
;; since the file name in the value is *NOT* split by whitespaces (i.e. files with whitespaces *ARE* supported,
;; although not recommended)
;; Examples:
;include = common.ini
;include = common_more.ini
;include = <<END
;yet_another_include.ini
;and_one_more.ini
;END


;; Mandatory parameters for otpauth challenge type
otpauth label =
otpauth issuer =
otpauth digits = 6

;; Allow some seconds of tolerance for otpauth challenge
;; Default is 10 seconds
;otpauth tolerance = 10

;; Some defaults used by otpauth challenge type
;oathtool = /usr/bin/oathtool

;; Optionally use a qrencoder utility
;; A good suggestion is 'qrencode'
;qrencoder =
;; Optional pngviewer (only if you set qrencoder above)
;; Some suggestions are 'eog' or 'xdg-open'
;pngviewer =
;; Alternatively, and also optionally, specify a qr code viewer to display the code directly instead
;; A good suggestion is 'qr' from python3-qrcode
;qrviewer =
qrviewer = qr


;; Options for webauthn

;; Mandatory URL base
;; The scheme *must* be https or it will fail, unless the hostname is localhost (which in turn is only useful for testing)
;; You should set this to something like https://your.external.web.domain/my-optional-path/...
;; (trailing slashes are ignored)
;; !!!!! IMPORTANT !!!!! - If you want to change this address in the future, see notes about rp id below
url base =

;; Relying Party identifier
;; By default will be the host part of the url base URI
;; This must match your url base domain, for example for your.external.web.domain you can use your.external.web.domain,
;; or external.web.domain, or web.domain
;; !!!!! IMPORTANT !!!!!
;; - If you want to change your URL base in the future, it *MUST* match what you had here when users registered their keys
;; - If what you set in the future doesn't match, the keys will no longer be valid and your users will have to be registered again
;; - Simply setting rp id to match the url base may not be enough due to browser or other library (mis)interpretations of the spec,
;;   so it's not advisable change this value (instead, pick a url base that won't change over time)
;rp id =

;; Relying Party name
;; Usually the name of the application
;; Defaults to ETVPN but you can set it to whatever you want
;rp name = ETVPN

;; PSGI group
;; The webauthn web interface is handled by a Perl Web Server Gateway Interface (PSGI) script
;; You must set the following value according to the way you'll be running it
;; Recommended usage is with uwsgi and setting the respective vassal to run under a dedicated group,
;; which by default is assumed to be etvpnwww, however you can tune this to your setup
;psgi group = etvpnwww

;; Registration tokens expiry time.
;; A number in seconds. Defaults to 172800 (2 days)
;registration expiry = 172800

;; Registration approval grace time.
;; After users have registered their device, how much to extend the expiry token expiry time,
;; relatively to when the user performed the registration, in order to give time for system
;; administrators to approve the request.
;; A number in seconds. Defaults to 1209600 (14 days)
;; Important: this can also be affected by the tmpfiles.d configuration (the cleanup made there is not crucial to security
;; since expired sessions aren't valid, but it's important because session files won't cleanup otherwise); if you want
;; to increase this period way above the default and have installed the original tmpfiles.d conf using a system package,
;; do *NOT* edit what is in /usr/lib/tmpfiles.d but instead override it creating a file with the same name and similar
;; settings in /etc/tmpfiles.d or your changes in /lib *WILL* be overwritten on package update
;registration approval grace = 1209600

;; Authentication tokens expiry time.
;; A number in seconds. Defaults to 120 (2 minutes)
;auth expiry = 120

;; CGI session path: should be somewhere your PSGI server can read and write, but should be otherwise restricted
;; It must already exist, and a fatal error will be thrown if it's not a directory with safe permissions
;; This same value must also be passed as an environment variable to the PSGI script, as
;; ETVPN_SESSION_BASE_DIR or the script will always fail.
;; Defaults to /var/lib/etvpn/cgi-sessions
;cgi session directory base = /var/lib/etvpn/cgi-sessions


;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Authentication Backends
;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; At least one backend must be defined and enabled
;; Each backend section must be of the form [backend REALM TYPE] corresponding to usernames in the form user@REALM
;; By default each backend is considered disabled unless it has the option enabled = true (or 1)
;; Some mandatory parameters, type dependent, must be defined if the backend is enabled, or the daemon won't start,
;; but if you leave the backend disabled by setting "enabled = false" (or ommiting the "enabled = true") then
;; that backend section validation will be skipped, so you can define only the backends you want and leave the following
;; defaults disabled
;; You can have as many backends as you want, if you need more of the same type just duplicate the following respective
;; sections and name them appropriately
;; See also the "default backend" option in the [global] section


;; A LDAP backend (e.g. Active Directory, OpenLDAP, FreeIPA)
[backend mydomain ldap]
enabled = false

;; Each backend can have one or more optional aliases
;; Example:
;realm aliases = optional.alias1 optional.alias2

;; For every backend, you can specify if it expects the realm (alias) to be appended to the username
;; For Active Directory, you usually need to set this to true, or use "ldap bind dn format" instead (see below)
;; For other LDAP types, leave this to the default (false), and it will try to find the bind name
;; from the options "ldap bind dn format" or "ldap bind dn" and "ldap bind password" (see below)
;auth append realm = false

;; Mandatory basic LDAP parameters - these must be defined if the backend is enabled, or the daemon won't start
;; ldap address can be a list of addresses or LDAP URIs that will always be tried in order before failing
ldap address =
ldap base =
ldap group =
;; LDAP timeout, minimum 1, default 10
;ldap timeout = 10

;; Mandatory LDAP login filter
;; Every login attempt must match this filter or access will be denied
;; Some special tags can be used and will be replaced before using the filter:
;; %u - username (without realm)
;; %R - backend realm
;; %r - user's realm name (may differ from backend's default realm when using realm aliases)
;; %b - the value of the "ldap base" option
;; %g - the value of the "ldap group" option
;; See examples and/or adapt to your type of LDAP
;; Example for Active Directory: (&(objectClass=user)(sAMAccountName=%u)(memberof=CN=%g,CN=Users,%b))
ldap login filter =

;; Mandatory LDAP dn filter
;; Used to obtain the LDAP entry from the username
;; Accepts the same replaceable tags as "ldap login filter"
;; See examples and/or adapt to your type of LDAP
;; Example for FreeIPA and other standard LDAP servers: (&(uid=%u)(objectClass=posixaccount))
;; Example for Active Directory: (sAMAccountName=%u)
ldap dn filter =

;; In non AD environments you usually need to translate the username to a DN so you need to set this
;; In AD, if you want to support logins with format domain\user, you need to set something like %r\%u here
;; but for user@domain it might be better to use the "auth append realm" option (see above)
;; Accepts the same replaceable tags as "ldap login filter"
;ldap bind dn format = uid=%u,cn=users,cn=accounts,%b

;; Optional alternative to find users DN before attempting to bind as user
;; Don't set if you use AD since in AD you use domain\user or user@domain for binding
;ldap bind dn = CN=vpnsearch,CN=sysaccounts,DC=foo,DC=bar
;ldap bind password = change_this_please_if_you_use_it

;; LDAP challenge field to define where each user signed encrypted challenge is stored
;; MULTI-FACTOR AUTHENTICATION WILL BE DISABLED IF THIS IS NOT DEFINED!
;; Mandatory if "enforce mfa" is true
;; For Active Directory, a good candidate is msNPCallingStationID which corresponds to User > Dial-in -> Verify Caller ID
ldap challenge field =

;; LDAP attribute that uniquely identifies a username entry
;; Mandatory if LDAP challenge field is set
;; For Active Directory, set this to objectGUID
;; For FreeIPA and other standard LDAP servers, set this to uidNumber
ldap unique identifier =

;; LDAP attribute with account name
;; For Active Directory, set this to sAMAccountName
;; For FreeIPA and other standard LDAP servers, set this to uid
;; Mandatory if LDAP challenge field is set
ldap account name =

;; Optional LDAP filter to check if a user is member of a group
;; If unset, static routes by group will be disabled for this backend
;; Accepts the same replaceable tags as "ldap login filter", plus:
;; - %G - the group to be checked
;; Example for Active Directory (nested groups): (&(objectClass=user)(sAMAccountName=%u)(memberof:1.2.840.113556.1.4.1941:=CN=%G,CN=Users,%b))
;; Example for Active Directory (without nested groups): (&(objectClass=user)(sAMAccountName=%u)(memberof=CN=%G,CN=Users,%b))
;ldap group membership filter =

;; Optional LDAP attribute to set a static IPv4 for each user
;; You may also need to add a learn-address or client-connect script to your OpenVPN
;; server instance so that system routes are set
;; See https://openvpn.net/faq/why-are-route-and-route-ipv6-commands-not-possible-in-a-ccd-file/ for
;; a basic example
;; For Active Directory, this is usually msRADIUSFramedIPAddress
;ldap ipv4 static address =

;; When "ldap ipv4 static address" is set, specify how it's stored
;; Valid formats are "text" and "int"
;; Defaults to "text", but for Active Directory you will want to set this to "int"
;ldap ipv4 static address format = text
;ldap ipv4 static address format = int

;; Optional LDAP attribute to set a static IPv6 for each user
;; The notes above for IPv4 static addresses probably needing a learn-address or a client-connnect
;; script also apply for this option, please take a look at those
;; For Active Directory, this is usually msRADIUS-FramedIpv6Prefix but also needs (unless you
;; are using custom attributes) to make use of "ldap ipv4 static address interface id" (see below)
;ldap ipv6 static address =

;; Optional LDAP attribute to complement a static IPv6 for each user
;; Usually only needed if the LDAP schema has some kind of constraints
;; For Active Directory you usually need to set this to msRADIUS-FramedInterfaceId
;ldap ipv6 static address interface id =

;; Optional LDAP attribute with list of IPv4 static routes to individually push to each user
;; For Active Directory, this is usually msRADIUSFramedRoute
;ldap ipv4 routes =

;; Optional LDAP attribute with list of IPv6 static routes to individually push to each user
;; For Active Directory, this is usually msRADIUS-FramedIpv6Route
;ldap ipv6 routes =

;; Optional LDAP attribute with list of IPv4 or IPv6 static routes to individually push to each user
;; For Active Directory (unless you are using a custom attribute), most likely you want to use "ldap ipv4 routes" and "ldap ipv6 routes" instead
;ldap ip routes =

;; Optional push routes specific to this backend
;; Like the global options with the same name/syntax, but only applied for this backend's users
;; The group variant will produce an error if group support ("ldap membership filter") is not configured for this backend
;; Some examples below
;push routes = network1/prefix1 network2/prefix2
;push routes group MyLDAPGroup = network1/prefix1 network2/prefix2

;; Optional IP pool group assignments specific to this backend
;; To use group based IP pools you must have a [ippool] section (see below)
;; Like the global option with the same name/syntax (see respective notes), but only applied for this backend's users
;; Some examples below
;ipv4 pool group MyLDAPGroup1 = 10.99.99.0/24
;ipv4 pool group MyLDAPGroup2 = 10.99.100.0/24


;; A SQL database backend
;; Supports storing UNIX crypted passwords, encrypted challenges, static IPv4 and IPv6 addresses and routes on a single database table
;; Should you already have an existing database with these options separated on different tables, you can create a VIEW (see your DB documentation)
[backend mydb_changehere sql]
enabled = false

;; Each backend can have one or more optional aliases
;; Example:
;realm aliases = optional.alias1 optional.alias2

;; For every backend, you can specify if it expects the realm (alias) to be appended to the username
;; Default is false, which is usually appropriate for sql backends
;username append realm = false

;; Mandatory: (perl) SQL driver
;; Notable examples are SQLite, Pg or mysql, but mostly anything that is supported by a perl DBD driver should work
;; To get a list of what is available on your system you can run:
;;     perl -MDBI -e 'print join("\n", DBI->available_drivers);'
;; (note that if you have the MariaDB driver, you can use "mysql" and it should also work)
;; If you are missing the driver you need, try searching for it using your system package manager
driver =

;; Mandatory: database parameters
;; Set them as needed for your database
;; You can consult perldoc DBI and perldoc DBD::your_db_driver for more details on syntax
;; Examples (mysql driver):
;;     database=my_auth_db;hostname=localhost
;;     database=my_auth_db;mysql_socket=/path/to/mysql.sock
;;     database=my_remote_auth_db;hostname=10.11.12.13;port=3307
;; Example (SQLite driver):
;;     dbname=/var/lib/etvpn/sqldb/auth.db
database parameters =

;; Unless you're using SQLite, your database will most likely require authentication
;; (if it doesn't, please consider configuring it for your own safety)
;; You can set these options to configure database authentication as needed, or set them in
;; the "database parameters" as well (see the perl DBI and DBD driver documentation)
;database username =
;database password =

;; If the above credentials don't have write access, and you need cli tools to prompt for those
;; when modifying users or their challenges, then you can set the following option to true
;need admin credentials = false

;; Users table/view, default is "users"
;users table = users

;; Users table columns, below are the default values
;; Please note that the password MUST be in UNIX crypt() format, other formats are unsupported
;; To manipulate the challenge field, please use tools/{otpauth,webauthn}/register-user-secret.pl
;users col id = id
;users col name = name
;users col password = password
;users col challenge = challenge

;; Optional users table fields - these will only be used if they are defined here
;; which means: THESE ARE NOT DEFAULTS - MUST UNCOMMENT THESE OPTIONS IF YOU WANT TO USE THEM
;; The routes contained in the table should be a comma or whitespace separated list
;users col ipv4 address = ipv4_address
;users col ipv6 address = ipv6_address
;users col ipv4 routes = ipv4_routes
;users col ipv6 routes = ipv6_routes

;; Optional groups table/view, by default is unset
;; which means: THIS IS NOT A DEFAULT - MUST UNCOMMENT THIS OPTION IF YOU WANT TO USE GROUPS
;; If you define this option, please pay attention to the "users groups relation table" option
;groups table = groups

;; Groups table columns (will only be used if "groups table" is defined), below are the default values
;groups col id = id
;groups col name = name

;; Optional groups table fields - these will only be used if they are defined here and "groups table"
;; is defined, which like the previous options means: THESE ARE NOT DEFAULTS - MUST UNCOMMENT THESE
;; OPTIONS IF YOU WANT TO USE THEM (there won't be much use for having groups if at least one isn't
;; set, but it won't be an error unless you try to set a value to an undefined column using the
;; tools/sql/manage_sql_user.pl utility)
;; Like their users' counterpart, the route values contained in these database columns should be a
;; comma or whitespace separated list
;groups col ipv4 routes = ipv4_routes
;groups col ipv6 routes = ipv6_routes

;; Table that defines the relation (membership) between users and groups
;; Only used if "groups table" is set
;; Default value is "users_groups"
;users groups relation table = users_groups

;; Columns on the "users groups relation table" above
;; Default values below, please adapt if you use a different schema
;users groups user id = user_id
;users groups group id = group_id

;; Table that defines the relation (membership) between groups and subgroups
;; Only used if "groups table" is set
;; Default value is "subgroups"
;subgroups relation table = subgroups

;; Columns on the "subgroups relation table" above
;; Default values below, please adapt if you use a different schema
;subgroups parent id = parent_id
;subgroups child id = child_id

;; Optional push routes specific to this backend
;; Like the global options with the same name/syntax, but only applied for this backend's users
;; The group variant will produce an error if group support ("groups table") is not configured for this backend
;; Some examples below
;push routes = network1/prefix1 network2/prefix2
;push routes group MySQLGroup = network1/prefix1 network2/prefix2

;; Optional IP pool group assignments specific to this backend
;; To use group based IP pools you must have a [ippool] section (see below)
;; Like the global option with the same name/syntax (see respective notes), but only applied for this backend's users
;; Some examples below
;ipv4 pool group MySQLGroup1 = 10.99.99.0/24
;ipv4 pool group MySQLGroup2 = 10.99.100.0/24


;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; IP Pool database
;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; To use group based IP pools you must have a [ippool] section
;; If you specify any ip pool option on other sections, without this section existing, it will be a configuration
;; error, however if you do not plan to use this feature then you can leave this section commented
;; It consists on a SQL database that should *NOT* be the same as any of the authentication backends, and contrary
;; to the SQL authentication backend, this databases' column names are not configurable (i.e. you must use the ippool
;; schema supplied along with the docs) since the implementation heavily relies on that schema
;[ippool]
;; Mandatory if [ippool] section exists: (perl) SQL driver
;; Notable examples are SQLite, Pg or mysql, but mostly anything that is supported by a perl DBD driver should work
;; To get a list of what is available on your system you can run:
;;     perl -MDBI -e 'print join("\n", DBI->available_drivers);'
;; (note that if you have the MariaDB driver, you can use "mysql" and it should also work)
;; If you are missing the driver you need, try searching for it using your system package manager
;driver =

;; Mandatory if [ippool] section exists: database parameters
;; Set them as needed for your database
;; You can consult perldoc DBI and perldoc DBD::your_db_driver for more details on syntax
;; Examples (mysql driver):
;;     database=my_ippool_db;hostname=localhost
;;     database=my_ipool_db;mysql_socket=/path/to/mysql.sock
;;     database=my_remote_ippool_db;hostname=10.11.12.13;port=3307
;; Example (SQLite driver):
;;     dbname=/var/lib/etvpn/ippool/ippool.db
;database parameters =

;; Unless you're using SQLite, your IP pool database will most likely require authentication
;; (if it doesn't, please consider configuring it for your own safety)
;; You can set these options to configure database authentication as needed, or set them in
;; the "database parameters" as well (see the perl DBI and DBD driver documentation)
;database username =
;database password =
